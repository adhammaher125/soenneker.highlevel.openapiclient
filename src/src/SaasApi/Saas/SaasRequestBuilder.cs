// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.AgencyPlans;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkDisableSaas;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkEnableSaas;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.EnableSaas;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.GetSaasSubscription;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Locations;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Pause;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasLocations;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasPlan;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateRebilling;
using Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateSaasSubscription;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Soenneker.HighLevel.OpenApiClient.SaasApi.Saas
{
    /// <summary>
    /// Builds and executes requests for operations under \saas-api\saas
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SaasRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The agencyPlans property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.AgencyPlans.AgencyPlansRequestBuilder AgencyPlans
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.AgencyPlans.AgencyPlansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bulkDisableSaas property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkDisableSaas.BulkDisableSaasRequestBuilder BulkDisableSaas
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkDisableSaas.BulkDisableSaasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bulkEnableSaas property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkEnableSaas.BulkEnableSaasRequestBuilder BulkEnableSaas
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.BulkEnableSaas.BulkEnableSaasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The enableSaas property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.EnableSaas.EnableSaasRequestBuilder EnableSaas
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.EnableSaas.EnableSaasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The getSaasSubscription property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.GetSaasSubscription.GetSaasSubscriptionRequestBuilder GetSaasSubscription
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.GetSaasSubscription.GetSaasSubscriptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The locations property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Locations.LocationsRequestBuilder Locations
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Locations.LocationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pause property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Pause.PauseRequestBuilder Pause
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.Pause.PauseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The saasLocations property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasLocations.SaasLocationsRequestBuilder SaasLocations
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasLocations.SaasLocationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The saasPlan property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasPlan.SaasPlanRequestBuilder SaasPlan
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasPlan.SaasPlanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The updateRebilling property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateRebilling.UpdateRebillingRequestBuilder UpdateRebilling
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateRebilling.UpdateRebillingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The updateSaasSubscription property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateSaasSubscription.UpdateSaasSubscriptionRequestBuilder UpdateSaasSubscription
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.UpdateSaasSubscription.UpdateSaasSubscriptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SaasRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/saas-api/saas", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.SaasApi.Saas.SaasRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SaasRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/saas-api/saas", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
