// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.HighLevel.OpenApiClient.Models;
using Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.BulkUpdate;
using Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Count;
using Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews
{
    /// <summary>
    /// Builds and executes requests for operations under \products\products\reviews
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ReviewsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulkUpdate property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.BulkUpdate.BulkUpdateRequestBuilder BulkUpdate
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.BulkUpdate.BulkUpdateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The count property</summary>
        public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Count.CountRequestBuilder Count
        {
            get => new global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Count.CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.HighLevel.OpenApiClient.products.products.reviews.item collection</summary>
        /// <param name="position">Review Id</param>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Item.WithReviewItemRequestBuilder"/></returns>
        public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Item.WithReviewItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("reviewId", position);
                return new global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.Item.WithReviewItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReviewsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/products/products/reviews?altId={altId}&altType={altType}{&endDate*,limit*,offset*,productId*,rating*,sortField*,sortOrder*,startDate*,storeId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReviewsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/products/products/reviews?altId={altId}&altType={altType}{&endDate*,limit*,offset*,productId*,rating*,sortField*,sortOrder*,startDate*,storeId*}", rawUrl)
        {
        }
        /// <summary>
        /// API to fetch the Product Reviews
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Models.ListProductReviewsResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO">When receiving a 400 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.ListProductReviewsResponseDto?> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder.ReviewsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.HighLevel.OpenApiClient.Models.ListProductReviewsResponseDto> GetAsync(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder.ReviewsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Soenneker.HighLevel.OpenApiClient.Models.BadRequestDTO.CreateFromDiscriminatorValue },
                { "401", global::Soenneker.HighLevel.OpenApiClient.Models.UnauthorizedDTO.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.HighLevel.OpenApiClient.Models.UnprocessableDTO.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.HighLevel.OpenApiClient.Models.ListProductReviewsResponseDto>(requestInfo, global::Soenneker.HighLevel.OpenApiClient.Models.ListProductReviewsResponseDto.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// API to fetch the Product Reviews
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder.ReviewsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder.ReviewsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// API to fetch the Product Reviews
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReviewsRequestBuilderGetQueryParameters 
        {
            /// <summary>Location Id or Agency Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("altId")]
            public string? AltId { get; set; }
#nullable restore
#else
            [QueryParameter("altId")]
            public string AltId { get; set; }
#endif
            [Obsolete("This property is deprecated, use AltTypeAsGetAltTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("altType")]
            public string? AltType { get; set; }
#nullable restore
#else
            [QueryParameter("altType")]
            public string AltType { get; set; }
#endif
            [QueryParameter("altType")]
            public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.GetAltTypeQueryParameterType? AltTypeAsGetAltTypeQueryParameterType { get; set; }
            /// <summary>The end date for filtering reviews</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("endDate")]
            public string? EndDate { get; set; }
#nullable restore
#else
            [QueryParameter("endDate")]
            public string EndDate { get; set; }
#endif
            /// <summary>The maximum number of items to be included in a single page of results</summary>
            [QueryParameter("limit")]
            public double? Limit { get; set; }
            /// <summary>The starting index of the page, indicating the position from which the results should be retrieved.</summary>
            [QueryParameter("offset")]
            public double? Offset { get; set; }
            /// <summary>Comma-separated list of product IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("productId")]
            public string? ProductId { get; set; }
#nullable restore
#else
            [QueryParameter("productId")]
            public string ProductId { get; set; }
#endif
            /// <summary>Key to filter the ratings </summary>
            [QueryParameter("rating")]
            public double? Rating { get; set; }
            /// <summary>The field upon which the sort should be applied</summary>
            [Obsolete("This property is deprecated, use SortFieldAsGetSortFieldQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortField")]
            public string? SortField { get; set; }
#nullable restore
#else
            [QueryParameter("sortField")]
            public string SortField { get; set; }
#endif
            /// <summary>The field upon which the sort should be applied</summary>
            [QueryParameter("sortField")]
            public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.GetSortFieldQueryParameterType? SortFieldAsGetSortFieldQueryParameterType { get; set; }
            /// <summary>The order of sort which should be applied for the sortField</summary>
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortOrder")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sortOrder")]
            public string SortOrder { get; set; }
#endif
            /// <summary>The order of sort which should be applied for the sortField</summary>
            [QueryParameter("sortOrder")]
            public global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.GetSortOrderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
            /// <summary>The start date for filtering reviews</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("startDate")]
            public string? StartDate { get; set; }
#nullable restore
#else
            [QueryParameter("startDate")]
            public string StartDate { get; set; }
#endif
            /// <summary>Comma-separated list of store IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("storeId")]
            public string? StoreId { get; set; }
#nullable restore
#else
            [QueryParameter("storeId")]
            public string StoreId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReviewsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.HighLevel.OpenApiClient.Products.Products.Reviews.ReviewsRequestBuilder.ReviewsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
